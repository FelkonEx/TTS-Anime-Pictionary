-- Deck List --
GUID_table = {}

GUID_table_Base = {
    "176075", -- Akame ga Kill!
    "7c816a", -- Angel Beats!
    "bbcd05", -- Ao no Exorcist
    "51910c", -- Boku no Hero Academia
    "cfb051", -- Boku dake ga Inai Machi
    "548140", -- Code Geass
    "b111a0", -- Death Note
    "1dc642", -- Dumbbell Nan Kilo Moteru?
    "8d1a2e", -- Fairy Tail
    "8de71a", -- Fate/Grand Order
    "7fb0db", -- Fate/kaleid liner Prismaâ˜†Illya!
    "b87ef5", -- Fate/stay night
    "8e09e6", -- Fate/Zero
    "b1da19", -- Fullmetal Alchemist
    "f5bde6", -- Hunter x Hunter
    "7b103b", -- Kill la Kill
    "0cdc5c", -- Kimi no Na wa.
    "40d754", -- Kono Subarashii Sekai ni Shukufuku wo!
    "7d0cd1", -- Mirai Nikki
    "612d20", -- Nanatsu no Taizai
    "ade87d", -- Naruto
    "1edb98", -- Nisekoi
    "59306f", -- No Game No Life
    "945f39", -- Noragami
    "2ae11b", -- One Punch Man
    "4fface", -- Psycho-Pass
    "c789ee", -- Re:Zero
    "fa08d5", -- Shigatsu wa Kimi no Uso
    "945263", -- Shingeki no Kyojin
    "6019e8", -- Shokugeki no Souma
    "498dd5", -- Soul Eater
    "ca6907", -- Steins;Gate
    "31a597", -- Sword Art Online
    "4cc559", -- Tengen Toppa Gurren Lagann
    "aac636", -- Tokyo Ghoul
    "18e56e"  -- Toradora!
}

GUID_table_Bonus = {
    "7fc42e", -- Boku no Hero Academia [Bonus]
    "cae9a9", -- Fairy Tail [Bonus]
    "c4298c", -- Fate [Bonus]
    "5ba6aa", -- Fullmetal Alchemist [Bonus]
    "4416d7", -- Hunter x Hunter [Bonus]
    "4bede7", -- Naruto [Bonus]
    "4c56b5", -- One Punch Man [Bonus]
    "e76712", -- Shingeki no Kyojin [Bonus]
    "1f7b90", -- Shokugeki no Souma [Bonus]
    "e16a09", -- Sword Art Online [Bonus]
    "a05957", -- FSN + FGO
    "8e4761", -- FZ + FGO
    "0f2375", -- FK + FGO
    "32c708", -- FSN + FZ + FGO
    "def320", -- Tohsaka, Rin
    "70ac4e"  -- Kotomine, Kirei
}

-- Alternative Titles List --
GUID_table_alt = {
    "ANE",      -- Ao no Exorcist
    "BDGIM",    -- Boku dake ga Inai Machi
    "BNHA",     -- Boku no Hero Academia
    "DNKM",     -- Dumbbell Nan Kilo Moteru?
    "KNNW",     -- Kimi no Na wa.
    "KSSNSW",   -- Kono Subarashii Sekai ni Shukufuku wo!
    "MN",       -- Mirai Nikki
    "NNT",      -- Nanatsu no Taizai
    "Nisekoi",  -- Nisekoi
    "RZ",       -- Re:Zero
    "SWKNU",     -- Shigatsu wa Kimi no Uso
    "SNK",      -- Shingeki no Kyojin
    "SNS"       -- Shokugeki no Souma
}

GUID_table_Complete = {}

-- Change Titles
function altTitlesOn()
    self.UI.setValue("ANE", "Blue Exorcist")
    self.UI.setValue("BNHA", "My Hero Academia")
    self.UI.setValue("BDGIM", "ERASED")
    self.UI.setValue("DNKM", "How heavy are the dumbbells you lift?")
    self.UI.setValue("KNNW", "your name.")
    self.UI.setValue("KSSNSW", "KonoSuba: God's Blessing on This Wonderful World!")
    self.UI.setValue("MN", "Future Diary")
    self.UI.setValue("NNT", "The Seven Deadly Sins")
    self.UI.setValue("Nisekoi", "Nisekoi: False Love")
    self.UI.setValue("RZ", "Re:ZERO -Starting Life in Another World-")
    self.UI.setValue("SWKNU", "Your Lie in April")
    self.UI.setValue("SNK", "Attack on Titan")
    self.UI.setValue("SNS", "Food Wars! Shokugeki no Soma")

    -- Set alternative titles to yellow
    for i = 1, #GUID_table_alt do
        self.UI.setAttribute(GUID_table_alt[i], "color", "#ffea00")
    end
end

function altTitlesOff()
    self.UI.setValue("ANE", "Ao no Exorcist")
    self.UI.setValue("BNHA", "Boku no Hero Academia")
    self.UI.setValue("BDGIM", "Boku dake ga Inai Machi")
    self.UI.setValue("DNKM", "Dumbbell Nan Kilo Moteru?")
    self.UI.setValue("KNNW", "Kimi no Na wa.")
    self.UI.setValue("KSSNSW", "Kono Subarashii Sekai ni Shukufuku wo!")
    self.UI.setValue("MN", "Mirai Nikki")
    self.UI.setValue("NNT", "Nanatsu no Taizai")
    self.UI.setValue("Nisekoi", "Nisekoi")
    self.UI.setValue("RZ", "Re:Zero kara Hajimeru Isekai Seikatsu")
    self.UI.setValue("SWKNU", "Shigatsu wa Kimi no Uso")
    self.UI.setValue("SNK", "Shingeki no Kyojin")
    self.UI.setValue("SNS", "Shokugeki no Souma")

    -- Set original titles to white
    for i = 1, #GUID_table_alt do
        self.UI.setAttribute(GUID_table_alt[i], "color", "#ffffff")
    end
end

function toggleTitles()
    if self.UI.getAttribute("showAltTitles", "active") == "True" then
        self.UI.setAttribute("showAltTitles", "active", false)
        self.UI.setAttribute("hideAltTitles", "active", true)
        altTitlesOn()
    else
        self.UI.setAttribute("showAltTitles", "active", true)
        self.UI.setAttribute("hideAltTitles", "active", false)
        altTitlesOff()
    end
end

-- Merge Base Deck and Bonus Deck Tables
function onLoad()
    local temp = {}
        for i = 1, #GUID_table_Base do
            table.insert(temp, 1, GUID_table_Base[i])
        end

        for i = 1, #GUID_table_Bonus do
            table.insert(temp, 1, GUID_table_Bonus[i])
        end
    GUID_table_Complete = temp
end

-- Add decks to the table
function addToTable(GUID)
    --log("Added GUID: " .. GUID)

    -- Check for duplicate entries
    for i = 1, #GUID_table do
       if GUID_table[i] == GUID then
           return
       end
    end
    table.insert(GUID_table, 1, GUID)
end

-- Checking and removing decks from the table
function removeFromTable(GUID)
    --log("Removed GUID: " .. GUID)
    for i = 1, #GUID_table do
       if GUID_table[i] == GUID then
           table.remove(GUID_table, i)
       end
    end
end

-- Print a list of decks in the table
function printTableContents()
    log("-----")
    log("~GUID List~")
    for i = 1, #GUID_table do
        log(GUID_table[i])
    end
    log("-----")
end

-- Add deck function linked to XML
function addDeck(player, option, id)
    self.UI.setAttribute(id, "isOn", option)

    if option == "True" then
        addToTable(id)
    elseif option == "False" then
        removeFromTable(id)
    end

    --printTableContents()
end

-- Fate exceptions
fateTable = {}

function addToSet(set, key)
    set[key] = true
end

function removeFromSet(set, key)
    set[key] = nil
end

function setContains(set, key)
    return set[key] ~= nil
end

function addDeckFate(player, option, id)
    self.UI.setAttribute(id, "isOn", option)

    if option == "True" then
        addToTable(id)
        addToSet(fateTable, id)

        if setContains(fateTable, "c4298c") == true then
            addToTable("a05957")
            addToTable("8e4761")
            addToTable("0f2375")
            addToTable("32c708")
        end

        if setContains(fateTable, "7fb0db") == true then
            addToTable("def320")
            addToTable("0f2375")
        end

        if setContains(fateTable, "b87ef5") == true then
            addToTable("def320")
            addToTable("a05957")
            addToTable("70ac4e")
            addToTable("32c708")
        end

        if setContains(fateTable, "8e09e6") == true then
            addToTable("8e4761")
            addToTable("70ac4e")
            addToTable("32c708")
        end

    elseif option == "False" then
        removeFromTable(id)
        removeFromSet(fateTable, id)

        if setContains(fateTable, "c4298c") == false and setContains(fateTable, "b87ef5") == false then
            removeFromTable("a05957")
        end

        if setContains(fateTable, "c4298c") == false and setContains(fateTable, "8e09e6") == false then
            removeFromTable("8e4761")
        end

        if setContains(fateTable, "c4298c") == false and setContains(fateTable, "7fb0db") == false then
            removeFromTable("0f2375")
        end

        if setContains(fateTable, "b87ef5") == false and setContains(fateTable, "8e09e6") == false then
            removeFromTable("70ac4e")
        end

        if setContains(fateTable, "b87ef5") == false and setContains(fateTable, "7fb0db") == false then
            removeFromTable("def320")
        end

        if setContains(fateTable, "b87ef5") == false and setContains(fateTable, "c4298c") == false and setContains(fateTable, "8e09e6") == false then
            removeFromTable("32c708")
        end
    end

    --printTableContents()
end

-- Dynamic Scripting Zone
function createZone()
    zonePosLocal = {8, 1, -11.625}
    zonePosWorld = self.positionToWorld(zonePosLocal)
    rot = self.getRotation()
    zoneSpawn = {
        type = "ScriptingTrigger",
        position = zonePosWorld,
        rotation = rot,
        scale = {2.35, 10, 3.27},
    }
    deckZone = spawnObject(zoneSpawn)
end

-- Create deck function linked to XML button
function createDeck()
    -- Check if table is empty
    if #GUID_table == 0 then
        print("No decks have been selected!")
        return
    end

    -- Set visibility of XML 'Create Deck' button
    self.UI.setAttribute("createDeckButton", "active", false)
    self.UI.setAttribute("createDeckButtonDisabled", "active", true)

    createZone()

    --Clear deck zone
    local clearZone = function()
        for i, object in ipairs(deckZone.getObjects()) do
            if object.tag == "Deck" then
                object.destruct()
            end
        end
    end

    Wait.frames(clearZone, 10)

    local placeDecks = function()
        local bagclone = getObjectFromGUID("4be299").clone({position = {0,100,0}})
        for i = 1, #GUID_table do
            bagclone.takeObject({position = zonePosWorld, rotation = {180,rot.y,0}, smooth = false, guid = GUID_table[i]})
        end
        bagclone.destruct()
    end

    Wait.frames(placeDecks, 15)

    local renameDeck = function()
        for i, object in ipairs(deckZone.getObjects()) do
            if object.tag == "Deck" then
                object.setName("")
                object.shuffle()
            end
        end
        deckZone.destruct()
        self.UI.setAttribute("createDeckButtonDisabled", "active", false)
        self.UI.setAttribute("createDeckButton", "active", true)
        print("New deck created and shuffled!")
    end

    Wait.frames(renameDeck, 20)
end

-- Show/Hide UI --
function toggleUI()
    if self.UI.getAttribute("tilehide", "active") == "True" then
        self.UI.setAttribute("tilehide", "active", false)
        self.UI.setAttribute("tileshow", "active", true)
        self.UI.hide("settingsUI")
        self.UI.hide("deckSelectorUI")
        self.UI.hide("zoneUI")
        self.UI.hide("zoneBorderUI")
        self.UI.setValue("toggleMenuText", "Show Menu")
    else
        self.UI.setAttribute("tilehide", "active", true)
        self.UI.setAttribute("tileshow", "active", false)
        self.UI.show("settingsUI")
        self.UI.show("deckSelectorUI")
        self.UI.show("zoneUI")
        self.UI.show("zoneBorderUI")
        self.UI.setValue("toggleMenuText", "Hide Menu")
    end
end

-- Settings Buttons --
function spawnDeckBag()
    self.UI.setAttribute("spawnBag", "active", false)
    self.UI.setAttribute("spawnBagDisabled", "active", true)

    local newObject
    zonePosLocal = {12, 5, -11.625}
    zonePosWorld = self.positionToWorld(zonePosLocal)
    newObject = getObjectFromGUID("4be299").clone({position = zonePosWorld})
    newObject.interactable = true
    newObject.use_gravity = true
    newObject.attachInvisibleHider("hide", false,
        {"White", "Brown", "Red", "Orange", "Yellow", "Green", "Teal", "Blue", "Purple", "Pink", "Grey", "Black"})

    Wait.frames(function()
            self.UI.setAttribute("spawnBag", "active", true)
            self.UI.setAttribute("spawnBagDisabled", "active", false)
        end, 90)
end

function deckSizesOn()
    for i = 1, #GUID_table_Complete do
        local id_concat = GUID_table_Complete[i] .. "_count"
        self.UI.setAttribute(id_concat, "color", "#ffea00")
    end
end

function deckSizesOff()
    for i = 1, #GUID_table_Complete do
        local id_concat = GUID_table_Complete[i] .. "_count"
        self.UI.setAttribute(id_concat, "color", "clear")
    end
end

function toggleDeckSizes()
    if self.UI.getAttribute("showDeckSizes", "active") == "True" then
        self.UI.setAttribute("showDeckSizes", "active", false)
        self.UI.setAttribute("hideDeckSizes", "active", true)
        deckSizesOn()
    elseif self.UI.getAttribute("showDeckSizes", "active") == "False" then
        self.UI.setAttribute("showDeckSizes", "active", true)
        self.UI.setAttribute("hideDeckSizes", "active", false)
        deckSizesOff()
    end
end

-- Function for selectAll/selectAllBase/deselectAll
function copyTable(oldTable)
    local newTable = {}
    for i = 1, #oldTable do
        newTable[i] = oldTable[i]
    end
    return newTable
end

function toggleSelectionGroups(IDtable, isOn)
    for i = 1, #IDtable do
        self.UI.setAttribute(IDtable[i], "isOn", isOn)
    end
end

function selectAll()
    local temp = copyTable(GUID_table_Complete)
    toggleSelectionGroups(temp, true)
    GUID_table = temp
end

function selectAllBase()
    local temp = copyTable(GUID_table_Base)
    deselectAll()
    toggleSelectionGroups(GUID_table_Base, true)
    GUID_table = temp
end

function deselectAll()
    toggleSelectionGroups(GUID_table_Complete, false)
    GUID_table = {}
end